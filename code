#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

struct Process {
    int pid;       // Process ID
    int burstTime; // Burst time
    int arrivalTime; // Arrival time
    int waitingTime;
    int turnaroundTime;
    int remainingTime; // Used for Round Robin
};

void calculateWaitingAndTurnaroundTime(vector<Process>& processes) {
    for (auto& process : processes) {
        process.turnaroundTime = process.waitingTime + process.burstTime;
    }
}

// First-Come, First-Served (FCFS) Scheduling
void fcfs(vector<Process>& processes) {
    int currentTime = 0;
    for (auto& process : processes) {
        if (currentTime < process.arrivalTime) {
            currentTime = process.arrivalTime;
        }
        process.waitingTime = currentTime - process.arrivalTime;
        currentTime += process.burstTime;
    }
    calculateWaitingAndTurnaroundTime(processes);
}

// Shortest Job First (SJF) Scheduling
void sjf(vector<Process>& processes) {
    int currentTime = 0;
    vector<Process> completed;
    while (!processes.empty()) {
        auto it = min_element(processes.begin(), processes.end(), [&](Process& a, Process& b) {
            return (a.burstTime < b.burstTime) && (a.arrivalTime <= currentTime);
        });
        if (it != processes.end() && it->arrivalTime <= currentTime) {
            it->waitingTime = currentTime - it->arrivalTime;
            currentTime += it->burstTime;
            completed.push_back(*it);
            processes.erase(it);
        } else {
            currentTime++;
        }
    }
    processes = completed;
    calculateWaitingAndTurnaroundTime(processes);
}

// Round Robin (RR) Scheduling
void roundRobin(vector<Process>& processes, int timeQuantum) {
    queue<Process*> readyQueue;
    int currentTime = 0;

    // Initialize remaining times
    for (auto& process : processes) {
        process.remainingTime = process.burstTime;
    }

    for (auto& process : processes) {
        if (process.arrivalTime <= currentTime) {
            readyQueue.push(&process);
        }
    }

    while (!readyQueue.empty()) {
        Process* current = readyQueue.front();
        readyQueue.pop();

        if (current->arrivalTime > currentTime) {
            currentTime = current->arrivalTime;
        }

        int timeSlice = min(current->remainingTime, timeQuantum);
        current->remainingTime -= timeSlice;
        currentTime += timeSlice;

        if (current->remainingTime == 0) {
            current->turnaroundTime = currentTime - current->arrivalTime;
            current->waitingTime = current->turnaroundTime - current->burstTime;
        } else {
            for (auto& process : processes) {
                if (&process != current && process.arrivalTime <= currentTime && process.remainingTime > 0 && find(readyQueue.begin(), readyQueue.end(), &process) == readyQueue.end()) {
                    readyQueue.push(&process);
                }
            }
            readyQueue.push(current);
        }
    }
}

void printProcessDetails(const vector<Process>& processes) {
    cout << "\nPID\tBurst\tArrival\tWaiting\tTurnaround\n";
    for (const auto& process : processes) {
        cout << process.pid << "\t" << process.burstTime << "\t" << process.arrivalTime << "\t" 
             << process.waitingTime << "\t" << process.turnaroundTime << "\n";
    }
}

int main() {
    int n, choice, timeQuantum;
    vector<Process> processes;

    cout << "Enter the number of processes: ";
    cin >> n;

    for (int i = 0; i < n; ++i) {
        Process process;
        cout << "Enter burst time and arrival time for process " << i + 1 << ": ";
        cin >> process.burstTime >> process.arrivalTime;
        process.pid = i + 1;
        processes.push_back(process);
    }

    cout << "\nChoose a scheduling algorithm:\n";
    cout << "1. First-Come, First-Served (FCFS)\n";
    cout << "2. Shortest Job First (SJF)\n";
    cout << "3. Round Robin (RR)\n";
    cin >> choice;

    switch (choice) {
        case 1:
            fcfs(processes);
            break;
        case 2:
            sjf(processes);
            break;
        case 3:
            cout << "Enter time quantum: ";
            cin >> timeQuantum;
            roundRobin(processes, timeQuantum);
            break;
        default:
            cout << "Invalid choice!\n";
            return 1;
    }

    printProcessDetails(processes);
    return 0;
}
